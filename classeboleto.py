# -*- coding: utf-8 -*-
"""ClasseBoleto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yULXZS3Z0u98JsL3maeFTVjLAIjF6dXN
"""

from datetime import datetime,date
from random import randint

class Boleto():

  def __init__(self,status,codigo,vencimento,valor,tipo,descricao):
    self.__status=status
    self.__codigo=codigo
    self.__vencimento=vencimento
    self.__valor=valor
    self.__tipo=tipo
    self.__descricao=descricao

  def bloquear_modificacao(self, nome):
      raise ValueError(f"Não é possível modificar o {nome} do boleto.")

  @property
  def status(self):
    return self.__status
  @status.setter
  def status(self, alteracao):
    raise ValueError(self.bloquear_modificacao("status"))

  @property
  def codigo(self):
    return self.__codigo
  @codigo.setter
  def codigo(self, alteracao):
    raise ValueError(self.bloquear_modificacao("código"))

  @property
  def vencimento(self):
    return self.__vencimento
  @vencimento.setter
  def vencimento(self, alteracao):
    raise ValueError(self.bloquear_modificacao("vencimento"))

  @property
  def valor(self):
    return self.__valor
  @valor.setter
  def valor(self, alteracao):
    raise ValueError(self.bloquear_modificacao("valor"))

  @property
  def tipo(self):
    return self.__tipo
  @tipo.setter
  def tipo(self, alteracao):
    raise ValueError(self.bloquear_modificacao("tipo"))

  @property
  def descricao(self):
    return self.__descricao
  @descricao.setter
  def descricao(self, alteracao):
    raise ValueError(self.bloquear_modificacao("descricao"))

  def atualizarStatus(self):
    if datetime.combine(self.__vencimento, datetime.min.time()) >= datetime.now():
      self.__status="A vencer"
    else:
      self.__status="Vencido"

  def calcularDataVencimento(self):
    distanciaData=str(datetime.now()-datetime.combine(self.vencimento, datetime.min.time()))
    if len(distanciaData.split(","))>1:
      distanciaData=distanciaData.split(",")[0]
      distanciaData=distanciaData.replace(' ','').replace('days','').replace('day','')
      inteiroDias=int(distanciaData)
      if inteiroDias<0:
        return f"{inteiroDias*(-1)} dia(s) até que o boleto expire."
      else:
        return f"{inteiroDias} dia(s) desde que o boleto expirou."
    else:
      return "O boleto expirou hoje."

  def exibirBoleto(self):
    self.atualizarStatus()
    return print(f"""
      Status: {self.__status}
      Código: {self.__codigo}
      Vencimento: {str(self.__vencimento),self.calcularDataVencimento()}
      Valor: R${self.__valor:.2f}
      Tipo: {self.__tipo}
      Descricao: {self.descricao}
      """)

Boleto1 = Boleto(
    None,
    6718239581032,
    date(2025, 8, 10),
    324.85,
    "Avulso",
    "Boleto de transação única para realizar transferência de dinheiro."
    )

Boleto1.exibirBoleto()

Boleto2 = Boleto(
    None,
    6235839382523,
    date(2025, 10, 29),
    1278.25,
    "Carnê",
    "Boleto de transação única para realizar transferência de dinheiro."
    )

Boleto2.exibirBoleto()

Boleto3 = Boleto(
    None,
    671124211064,
    date(2025, 8, 26),
    3982.10,
    "Recorrente",
    "Boleto de transação única para realizar transferência de dinheiro."
    )

Boleto3.exibirBoleto()